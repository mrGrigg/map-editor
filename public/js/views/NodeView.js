// Generated by CoffeeScript 1.6.2
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['models/Node'], function(Node) {
    var NodeView, _ref;

    return NodeView = (function(_super) {
      __extends(NodeView, _super);

      function NodeView() {
        this.createTileImage = __bind(this.createTileImage, this);
        this.handleDrop = __bind(this.handleDrop, this);
        this.dragOver = __bind(this.dragOver, this);
        this.dragEnter = __bind(this.dragEnter, this);
        this.render = __bind(this.render, this);
        this.initialize = __bind(this.initialize, this);        _ref = NodeView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      NodeView.prototype.className = 'map-node empty';

      NodeView.prototype.initialize = function() {
        this.model = new Node({
          x: this.options.x,
          y: this.options.y
        });
        return this.dnd = 'application/json';
      };

      NodeView.prototype.render = function() {
        var coordinateClass;

        coordinateClass = "coords[" + this.model.x + "," + this.model.y + "]";
        this.$el.addClass(coordinateClass);
        this.$el.attr('title', "" + this.model.x + ", " + this.model.y);
        this.$el.attr('dropzone', 'copy application/json');
        return this;
      };

      NodeView.prototype.dragEnter = function(event) {
        event.dataTransfer.dropEffect = 'move';
        event.preventDefault();
        return false;
      };

      NodeView.prototype.dragOver = function(event) {
        event.dataTransfer.dropEffect = 'move';
        event.preventDefault();
        return false;
      };

      NodeView.prototype.handleDrop = function(event) {
        var data, image;

        data = event.dataTransfer.getData(this.dnd);
        this.model.set(JSON.parse(data));
        image = this.createTileImage();
        this.$el.html(image);
        this.$el.removeClass('empty');
        return Backbone.Events.trigger('node:create', this.model);
      };

      NodeView.prototype.createTileImage = function() {
        var image;

        image = document.createElement('img');
        image.height = 32;
        image.width = 32;
        image.src = this.model.get('data');
        image.title = this.model.get('name');
        return image;
      };

      return NodeView;

    })(Backbone.View);
  });

}).call(this);
