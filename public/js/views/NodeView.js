// Generated by CoffeeScript 1.6.2
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['modules/Tiles', 'modules/createTileImage'], function(Tiles, createTileImage) {
    var NodeView, _ref;

    return NodeView = (function(_super) {
      __extends(NodeView, _super);

      function NodeView() {
        this.placeTile = __bind(this.placeTile, this);
        this.tileSelected = __bind(this.tileSelected, this);
        this.handleDrop = __bind(this.handleDrop, this);
        this.dragOver = __bind(this.dragOver, this);
        this.dragEnter = __bind(this.dragEnter, this);
        this.render = __bind(this.render, this);
        this.initialize = __bind(this.initialize, this);        _ref = NodeView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      NodeView.prototype.className = 'map-node empty';

      NodeView.prototype.events = {
        'click': 'placeTile'
      };

      NodeView.prototype.initialize = function() {
        Backbone.Events.on('tile:selected', this.tileSelected);
        return this.dnd = 'application/json';
      };

      NodeView.prototype.render = function() {
        var coordinateClass, image, tileName;

        coordinateClass = "coords[" + (this.model.get('x')) + "," + (this.model.get('y')) + "]";
        this.$el.addClass(coordinateClass);
        this.$el.attr('title', "" + (this.model.get('x')) + ", " + (this.model.get('y')));
        this.$el.attr('dropzone', 'copy application/json');
        tileName = this.model.get('name');
        if (tileName != null) {
          image = createTileImage(tileName);
          this.$el.html(image);
          this.$el.removeClass('empty');
        }
        return this;
      };

      NodeView.prototype.dragEnter = function(event) {
        event.dataTransfer.dropEffect = 'move';
        event.preventDefault();
        return false;
      };

      NodeView.prototype.dragOver = function(event) {
        event.dataTransfer.dropEffect = 'move';
        event.preventDefault();
        return false;
      };

      NodeView.prototype.handleDrop = function(event) {
        var data;

        data = event.dataTransfer.getData(this.dnd);
        this.model.set(JSON.parse(data));
        return this.placeTile();
      };

      NodeView.prototype.tileSelected = function(tile) {
        return this.selectedTile = tile;
      };

      NodeView.prototype.placeTile = function() {
        var image;

        this.model.set(this.selectedTile);
        image = createTileImage(this.model.get('name'));
        this.$el.html(image);
        this.$el.removeClass('empty');
        return Backbone.Events.trigger('node:create', this.model);
      };

      return NodeView;

    })(Backbone.View);
  });

}).call(this);
