// Generated by CoffeeScript 1.6.2
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function() {
    var EditorMain, _ref;

    return EditorMain = (function(_super) {
      __extends(EditorMain, _super);

      function EditorMain() {
        this.hideModal = __bind(this.hideModal, this);
        this.showModal = __bind(this.showModal, this);
        this.renderChild = __bind(this.renderChild, this);
        this.render = __bind(this.render, this);
        this.initialize = __bind(this.initialize, this);        _ref = EditorMain.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      EditorMain.prototype.el = 'body';

      EditorMain.prototype.initialize = function() {
        Backbone.Events.on('modalShow', this.showModal, this);
        Backbone.Events.on('modalHide', this.hideModal, this);
        return Backbone.Events.on('renderChildView', this.renderChild, this);
      };

      EditorMain.prototype.render = function() {
        return this;
      };

      EditorMain.prototype.renderChild = function(View, model) {
        if (this.childView != null) {
          this.childView.remove();
        }
        if (View != null) {
          this.childView = new View({
            model: model
          });
          return this.$el.append(this.childView.render().el);
        }
      };

      EditorMain.prototype.showModal = function(Modal) {
        if (Modal != null) {
          this.$el.append('<div class="overlay"></div>');
          this.modalView = new Modal;
          return this.$el.append(this.modalView.render().el);
        }
      };

      EditorMain.prototype.hideModal = function() {
        this.$('.overlay').remove();
        if (this.modalView != null) {
          return this.modalView.remove();
        }
      };

      return EditorMain;

    })(Backbone.View);
  });

}).call(this);
