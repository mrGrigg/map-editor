// Generated by CoffeeScript 1.6.2
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['views/NodeView', 'models/Node'], function(NodeView, Node) {
    var MapView, _ref;

    return MapView = (function(_super) {
      __extends(MapView, _super);

      function MapView() {
        this.addNode = __bind(this.addNode, this);
        this.drawNodes = __bind(this.drawNodes, this);
        this.getNodeModel = __bind(this.getNodeModel, this);
        this.generateNodeArray = __bind(this.generateNodeArray, this);
        this.render = __bind(this.render, this);
        this.initialize = __bind(this.initialize, this);        _ref = MapView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      MapView.prototype.className = 'map-canvas';

      MapView.prototype.initialize = function() {
        return Backbone.Events.on('node:create', this.addNode);
      };

      MapView.prototype.render = function() {
        this.drawNodes(this.generateNodeArray());
        return this;
      };

      MapView.prototype.generateNodeArray = function() {
        var height, nodeArray, width, y, _fn, _i, _ref1,
          _this = this;

        height = this.model.get('height');
        width = this.model.get('width');
        nodeArray = new Array(height);
        _fn = function(y) {
          var x, _j, _ref2, _results;

          nodeArray[y] = new Array(width);
          _results = [];
          for (x = _j = 0, _ref2 = width - 1; 0 <= _ref2 ? _j <= _ref2 : _j >= _ref2; x = 0 <= _ref2 ? ++_j : --_j) {
            _results.push((function(x) {
              var node;

              node = _this.getNodeModel(x, y);
              return nodeArray[y][x] = new NodeView({
                model: node
              });
            })(x));
          }
          return _results;
        };
        for (y = _i = 0, _ref1 = height - 1; 0 <= _ref1 ? _i <= _ref1 : _i >= _ref1; y = 0 <= _ref1 ? ++_i : --_i) {
          _fn(y);
        }
        return nodeArray;
      };

      MapView.prototype.getNodeModel = function(x, y) {
        var node;

        node = this.collection.get("" + x + "-" + y);
        return node != null ? node : new Node({
          x: x,
          y: y,
          mapId: this.model.id
        });
      };

      MapView.prototype.drawNodes = function(nodeArray) {
        var map, row, _fn, _i, _len;

        map = document.createElement('div');
        _fn = function(row) {
          var node, _j, _len1, _results;

          _results = [];
          for (_j = 0, _len1 = row.length; _j < _len1; _j++) {
            node = row[_j];
            _results.push((function(node) {
              return map.appendChild(node.render().el);
            })(node));
          }
          return _results;
        };
        for (_i = 0, _len = nodeArray.length; _i < _len; _i++) {
          row = nodeArray[_i];
          _fn(row);
        }
        return this.$el.append(map);
      };

      MapView.prototype.addNode = function(node) {
        this.collection.add(node);
        return this;
      };

      return MapView;

    })(Backbone.View);
  });

}).call(this);
