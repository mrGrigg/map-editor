// Generated by CoffeeScript 1.6.2
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['modules/Tiles', 'views/TileView', 'text!templates/palette.html'], function(Tiles, TileView, template) {
    var PaletteView, _ref;

    return PaletteView = (function(_super) {
      __extends(PaletteView, _super);

      function PaletteView() {
        this.togglePallete = __bind(this.togglePallete, this);
        this.selectTile = __bind(this.selectTile, this);
        this.render = __bind(this.render, this);
        this.initialize = __bind(this.initialize, this);        _ref = PaletteView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      PaletteView.prototype.className = 'palette';

      PaletteView.prototype.events = {
        'click .paletteTile': 'selectTile',
        'click .toggle-palette': 'togglePallete'
      };

      PaletteView.prototype.initialize = function() {
        return this;
      };

      PaletteView.prototype.render = function() {
        var data, name, tileView, tiles, toggle;

        tiles = document.createElement('div');
        toggle = Handlebars.compile(template);
        for (name in Tiles) {
          data = Tiles[name];
          tileView = new TileView({
            data: data,
            name: name
          });
          tiles.appendChild(tileView.render().el);
        }
        this.$el.html(tiles.children);
        this.$el.append(toggle);
        return this;
      };

      PaletteView.prototype.selectTile = function(event) {
        var tile;

        this.$('.selected').removeClass('selected');
        tile = event.currentTarget;
        return tile.classList.add('selected');
      };

      PaletteView.prototype.togglePallete = function() {
        var toggle;

        toggle = this.$('.arrow');
        this.$('.paletteTile:not(.selected)').toggle();
        return toggle.toggleClass('open closed');
      };

      return PaletteView;

    })(Backbone.View);
  });

}).call(this);
